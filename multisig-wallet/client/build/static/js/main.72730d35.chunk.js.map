{"version":3,"sources":["utils.js","Header.js","NewTransfer.js","TransferList.js","App.js","index.js"],"names":["getWallet","web3","eth","net","getId","networkId","deployedNetwork","Wallet","networks","Contract","abi","address","Header","approvers","quorum","join","NewTransfer","createTransfer","useState","undefined","transfer","setTransfer","updateTransfer","e","field","value","target","onSubmit","preventDefault","submit","htmlFor","id","type","onChange","TransferList","transfers","approveTransfer","map","key","amount","to","approvals","onClick","sent","App","setWeb3","accounts","setAccounts","wallet","setWallet","setApprovers","setQuorum","setTransfers","useEffect","Promise","resolve","reject","detectEthereumProvider","provider","request","method","Web3","window","ethereum","error","getAccounts","methods","getApprovers","call","getTransfers","init","send","from","transferId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72730d35.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\nimport Wallet from './contracts/Wallet.json';\r\n\r\nconst getWeb3 = () =>\r\n  new Promise( async (resolve, reject) => {\r\n    let provider = await detectEthereumProvider();\r\n    if(provider) {\r\n      await provider.request({ method: 'eth_requestAccounts' });\r\n      try {\r\n        const web3 = new Web3(window.ethereum);\r\n        resolve(web3);\r\n      } catch(error) {\r\n        reject(error);\r\n      }\r\n    }\r\n    reject('Install Metamask');\r\n  });\r\n\r\nconst getWallet = async web3 => {\r\n  const networkId = await web3.eth.net.getId();\r\n  const deployedNetwork = Wallet.networks[networkId];\r\n  return new web3.eth.Contract(\r\n    Wallet.abi,\r\n    deployedNetwork && deployedNetwork.address,\r\n  );\r\n}\r\n\r\nexport { getWeb3, getWallet }; \r\n","import React from 'react';\r\n\r\nfunction Header({approvers, quorum}) {\r\n  return (\r\n    <header>\r\n      <ul>\r\n        <li>Approvers: {approvers.join(', ')}</li>\r\n        <li>Quorum: {quorum}</li>\r\n      </ul>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from 'react';\r\n\r\nfunction NewTransfer({createTransfer}) {\r\n  const [transfer, setTransfer] = useState(undefined);\r\n\r\n  const submit = e => {\r\n    e.preventDefault();\r\n    createTransfer(transfer);\r\n  }\r\n\r\n  const updateTransfer = (e, field) => {\r\n    const value = e.target.value;\r\n    setTransfer({...transfer, [field]: value});\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Create transfer</h2>\r\n      <form onSubmit={(e) => submit(e)}>\r\n        <label htmlFor=\"amount\">Amount</label>\r\n        <input\r\n          id=\"amount\"\r\n          type=\"text\"\r\n          onChange={e => updateTransfer(e, 'amount')}\r\n        />\r\n        <label htmlFor=\"to\">To</label>\r\n        <input\r\n          id=\"to\"\r\n          type=\"text\"\r\n          onChange={e => updateTransfer(e, 'to')}\r\n        />\r\n        <button>Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewTransfer;\r\n","import React from 'react';\r\n\r\nfunction TransferList({transfers, approveTransfer}) {\r\n  return (\r\n    <div>\r\n      <h2>Transfers</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Id</th>\r\n            <th>Amount</th>\r\n            <th>To</th>\r\n            <th>approvals</th>\r\n            <th>sent</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {transfers.map(transfer => (\r\n            <tr key={transfer.id}>\r\n              <td>{transfer.id}</td>\r\n              <td>{transfer.amount}</td>\r\n              <td>{transfer.to}</td>\r\n              <td>\r\n                {transfer.approvals}\r\n                <button onClick={() => approveTransfer(transfer.id)}>Approve</button>\r\n              </td>\r\n              <td>{transfer.sent ? 'yes' : 'no'}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransferList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getWeb3, getWallet } from './utils.js';\r\nimport Header from './Header.js';\r\nimport NewTransfer from './NewTransfer.js';\r\nimport TransferList from './TransferList.js';\r\n\r\nfunction App() {\r\n  const [web3, setWeb3] = useState(undefined);\r\n  const [accounts, setAccounts] = useState(undefined);\r\n  const [wallet, setWallet] = useState(undefined);\r\n  const [approvers, setApprovers] = useState(undefined);\r\n  const [quorum, setQuorum] = useState(undefined);\r\n  const [transfers, setTransfers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      const web3 = await getWeb3();\r\n      const accounts = await web3.eth.getAccounts();\r\n      const wallet = await getWallet(web3);\r\n      const approvers = await wallet.methods.getApprovers().call();\r\n      const quorum = await wallet.methods.quorum().call();\r\n      const transfers = await wallet.methods.getTransfers().call();\r\n      setWeb3(web3);\r\n      setAccounts(accounts);\r\n      setWallet(wallet);\r\n      setApprovers(approvers);\r\n      setQuorum(quorum);\r\n      setTransfers(transfers);\r\n    };\r\n    init();\r\n  }, []);\r\n\r\n  const createTransfer = transfer => {\r\n    wallet.methods\r\n      .createTransfer(transfer.amount, transfer.to)\r\n      .send({from: accounts[0]});\r\n  }\r\n\r\n  const approveTransfer = transferId => {\r\n    wallet.methods\r\n      .approveTransfer(transferId)\r\n      .send({from: accounts[0]});\r\n  }\r\n\r\n  if(\r\n    typeof web3 === 'undefined'\r\n    || typeof accounts === 'undefined'\r\n    || typeof wallet === 'undefined'\r\n    || typeof approvers === 'undefined'\r\n    || typeof quorum === 'undefined'\r\n  ) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      Multisig Dapp\r\n      <Header approvers={approvers} quorum={quorum} />\r\n      <NewTransfer createTransfer={createTransfer} />\r\n      <TransferList transfers={transfers} approveTransfer={approveTransfer} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}